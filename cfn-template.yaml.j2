---
AWSTemplateFormatVersion: "2010-09-09"

Description: Configures AWS resources for creating AMIs from OVAs

Parameters:
  TopicEmail:
    Default: "{{ email }}"
    Description: E-mail address to subscribe to alerts
    Type: String

Resources:
  IAMRoleVMIE:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - vmie.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: "vmimport"
      Path: "/"

  IAMPolicyVMIE:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Join ["", [Ref: "AWS::StackName", "vmimport-vmie-pol"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
            Resource: !Join ["", ["arn:aws:s3:::", Ref: "S3BucketVMIE"]]
          -
            Effect: "Allow"
            Action:
              - "s3:GetObject"
            # yamllint disable-line rule:line-length
            Resource: !Join ["", ["arn:aws:s3:::", Ref: "S3BucketVMIE", "/*"]]
          -
            Effect: "Allow"
            Action:
              - "ec2:ModifySnapshotAttribute"
              - "ec2:CopySnapshot"
              - "ec2:RegisterImage"
              - "ec2:Describe*"
            Resource: "*"
      Roles:
        -
          Ref: "IAMRoleVMIE"

  IAMRoleLambda:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  IAMPolicyLambda:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Join ["-", [Ref: "AWS::StackName", "vmimport-lambda-pol"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:ListAllMyBuckets"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "s3:CreateBucket"
              - "s3:DeleteBucket"
              - "s3:DeleteObject"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:AbortMultipartUpload"
              - "s3:ListMultipartUpload"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource:
              - !Join ["", ["arn:aws:s3:::", Ref: "S3BucketVMIE"]]
              - !Join ["", ["arn:aws:s3:::", Ref: "S3BucketVMIE", "/*"]]
          -
            Effect: "Allow"
            Action:
              - "ec2:CancelConversionTask"
              - "ec2:CancelExportTask"
              - "ec2:CreateImage"
              - "ec2:CreateInstanceExportTask"
              - "ec2:CreateTags"
              - "ec2:DeleteTags"
              - "ec2:DescribeConversionTasks"
              - "ec2:DescribeExportTasks"
              - "ec2:DescribeInstanceAttribute"
              - "ec2:DescribeInstanceStatus"
              - "ec2:DescribeInstances"
              - "ec2:DescribeTags"
              - "ec2:ImportInstance"
              - "ec2:ImportVolume"
              - "ec2:StartInstances"
              - "ec2:StopInstances"
              - "ec2:TerminateInstances"
              - "ec2:ImportImage"
              - "ec2:ImportSnapshot"
              - "ec2:DescribeImportImageTasks"
              - "ec2:DescribeImportSnapshotTasks"
              - "ec2:CancelImportTask"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "dynamodb:DeleteItem"
              - "dynamodb:Scan"
              - "dynamodb:UpdateItem"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:GetItem"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "events:DisableRule"
              - "events:EnableRule"
              - "events:DescribeRule"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "logs:*"
            Resource: "arn:aws:logs:*:*:*"
          -
            Effect: "Allow"
            Action:
              - "sns:Publish"
            Resource: "*"
      Roles:
        -
          Ref: "IAMRoleLambda"

  S3BucketLambda:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "BucketOwnerFullControl"

  S3BucketVMIE:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "BucketOwnerFullControl"
      # jinja2 conditional {% if s3_notification %}
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  -
                    Name: "Suffix"
                    Value: "ova"
            Function: !GetAtt LambdaImportOVA.Arn
            # jinja2 conditional {% endif %}

  TableVMIEStatus:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "ImportTaskId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "ImportTaskId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  SNSTopicVMIE:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: "VMIE notifications"
      Subscription:
        -
          Endpoint: !Ref TopicEmail
          Protocol: "email"

  # jinja2 conditional {% if lambda_code %}
  LambdaImportOVA:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "lambda_code.handle_new_images"
      Role: !GetAtt IAMRoleLambda.Arn
      Code:
        S3Bucket: !Ref S3BucketLambda
        S3Key: "lambda_code.zip"
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref TableVMIEStatus
          SCHEDULE_RULE: !Ref ScheduleCheckImport
          SNS_TOPIC: !Ref SNSTopicVMIE
          VMIE_IAM_ROLE: !Ref IAMRoleVMIE
      Description: "Imports OVAs uploaded to an S3 bucket"
      Runtime: "python2.7"
      Timeout: "60"

  LambdaCheckImport:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "lambda_code.handle_task_scans"
      Role: !GetAtt IAMRoleLambda.Arn
      Code:
        S3Bucket: !Ref S3BucketLambda
        S3Key: "lambda_code.zip"
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref TableVMIEStatus
          SCHEDULE_RULE: !Ref ScheduleCheckImport
          SNS_TOPIC: !Ref SNSTopicVMIE
          VMIE_IAM_ROLE: !Ref IAMRoleVMIE
       Description: "Checks VM Import status"
      Runtime: "python2.7"
      Timeout: "60"
  # jinja2 conditional {% endif %}

  ScheduleCheckImport:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "cron(0/30 * * * ? *)"
      State: "DISABLED"
      # jinja2 conditional {% if lambda_code %}
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "LambdaCheckImport"
              - "Arn"
          Id: "vmie_status_check"
          # jinja2 conditional {% endif %}

  # jinja2 conditional {% if lambda_code %}
  LambdaPermissionEvents:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "LambdaCheckImport"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduleCheckImport"
          - "Arn"

  LambdaPermissionS3:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "LambdaImportOVA"
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceArn: !Join ["", ["arn:aws:s3:::", Ref: "S3BucketVMIE"]]
      # jinja2 conditional {% endif %}
